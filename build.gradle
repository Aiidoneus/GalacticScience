println """
******************************************
        Building Galactic Science! 

 Output files will be in basePath/build/
******************************************
"""

import org.apache.tools.ant.filters.ReplaceTokens

version = packVersion
description = packDescription
def forgeCompatibility = packForgeCompatibility

ext {
    buildSources = "$buildDir/sources"
}

task buildAll(dependsOn: ['buildServer', 'buildClient', 'buildCurse'])

task compileServer(type: Copy) {
    doFirst {
        delete("$buildSources/server")
    }
    from('src') {
        exclude '**/_CLIENT/**'
    }
    from('src') {
        include '**/*.properties'
        include '**/*.txt'
        include '**/*.json'
        include '**/*.cfg'
        include '**/*.conf'
        include '**/*.config'
        include '**/*.xml'
        include '**/*.recipes'
        exclude '**/_CLIENT/**'
        filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
    }
    into "$buildSources/server"

    eachFile { details ->
        details.path = details.path.replaceAll('_SERVER', '');
    }
    includeEmptyDirs = false
}

task compileClient(type: Copy) {
    doFirst {
        delete("$buildSources/client")
    }
    from('src') {
        exclude '**/_SERVER/**'
    }
    from('src') {
        include '**/*.properties'
        include '**/*.txt'
        include '**/*.json'
        include '**/*.cfg'
        include '**/*.conf'
        include '**/*.config'
        include '**/*.xml'
        include '**/*.recipes'
        exclude '**/_SERVER/**'
        filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
    }
    into "$buildSources/client"

    eachFile { details ->
        details.path = details.path.replaceAll('_CLIENT', '');
    }
    includeEmptyDirs = false
}

task compileCurse(type: Copy) {
    delete "$buildSources/curse"
    copy {
        from('src') {
            exclude '**/_SERVER/**'
            exclude 'manifest.json'
        }
        into "$buildSources/curse/overrides"

        eachFile { details ->
            details.path = details.path.replaceAll('_CLIENT', '');

            if (details.getName() ==~ /.*\.(properties|txt|json|cfg|conf|config|xml|recipes)/) {
                filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
            }

            if (details.getPath().startsWith('mods/')) {
                def includeMods = project.unavailableCurseMods.split(',')
                def exclude = true
                for(mod in includeMods) {
                    if (details.getName() ==~ /${mod}/) {
                        exclude = false
                    }
                }
                if (exclude) {
                    details.exclude()
                }
            }
        }
        includeEmptyDirs = false
    }
    copy {
        from('src') {
            include 'manifest.json'
        }
        into "$buildSources/curse"
    }
}

task buildServer(type: Zip, dependsOn: ['compileServer']) {
    from "$buildSources/server"
    baseName = "$buildDir/${project.name}_${project.version}_Server"
}

task buildClient(type: Zip, dependsOn: ['compileClient']) {
    from "$buildSources/client"
    baseName = "$buildDir/${project.name}_${project.version}_Client"
}

task buildCurse(type: Zip, dependsOn: ['compileCurse']) {
    from "$buildSources/curse"
    baseName = "$buildDir/${project.name}_${project.version}_CurseProfile"
}
